import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import QRCode from "qrcode";
import { ChangeEvent, FormEvent, useState } from "react";
import QRGenerator from "../src/QRGenerator";

interface InvoiceRequest {
  description: string;
  sats: number;
}

const Home: NextPage = () => {
  const [invoice, setInvoice] = useState("");
  const [error, setError] = useState("");

  const [description, setDescription] = useState<string>("Test description");
  const [sats, setSats] = useState<string>("123");

  async function generateInvoice(e: FormEvent) {
    e.preventDefault();
    const invoice: InvoiceRequest = {
      description,
      sats: Number(sats),
    };

    const body = JSON.stringify(invoice);

    console.log({ body });

    const settings = {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body,
    };
    try {
      const response = await fetch("/api/invoice", settings);
      if (response.ok) {
        const json = await response.json();
        console.log(json);
        setInvoice(json);
        setError("");
      } else {
        const text = await response.text();
        throw new Error(text);
      }
    } catch (e) {
      console.error(e);
      setError(e.message);
      setInvoice("");
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Addressless</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>Let's make an invoice</h1>
        <form className={styles.form} onSubmit={generateInvoice}>
          <label>
            Sats
            <input
              type="number"
              min={1}
              max={21000000 * 100000000}
              value={sats}
              onChange={(e) => setSats(e.target.value)}
            />
          </label>
          <label>
            Description
            <input
              type="text"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          </label>
          <input type="submit" value="Generate" />
        </form>
        <div className={styles.invoice}>
          <code>{invoice}</code>
          <div className={styles.error}>{error}</div>
          <div className={styles.qr}>
            {invoice.length > 1 && !error && (
              <QRGenerator qrCode={invoice} width={400} />
            )}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
