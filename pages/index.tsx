import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { FormEvent, useState } from "react";
import QRGenerator from "../src/QRGenerator";
import { lnurlencode } from "../src/util";

interface InvoiceRequest {
  description: string;
  sats: number;
}

interface PageProps {
  name: string;
  prettyUrl: string;
  lnurl: string;
}

export async function getStaticProps() {
  const prettyUrl = process.env.ADDRESSLESS_DOMAIN || "";
  const name = process.env.ADDRESSLESS_NAME || "";
  const lnurl = prettyUrl ? lnurlencode(`https://${prettyUrl}/api/lnurlp`) : "";

  return {
    props: {
      name,
      prettyUrl,
      lnurl,
    },
  };
}

const Home: NextPage<PageProps> = ({ name, prettyUrl, lnurl }) => {
  const [invoice, setInvoice] = useState("");
  const [error, setError] = useState("");

  const [description, setDescription] = useState<string>("Test description");
  const [sats, setSats] = useState<string>("123");

  const lightningAddress =
    name === "" || prettyUrl === ""
      ? "Lightning address vars not set."
      : `${name}@${prettyUrl}`;

  async function generateInvoice(e: FormEvent) {
    e.preventDefault();
    const invoice: InvoiceRequest = {
      description,
      sats: Number(sats),
    };

    const body = JSON.stringify(invoice);

    console.log({ body });

    const settings = {
      method: "POST",
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json",
      },
      body,
    };
    try {
      const response = await fetch("/api/invoice", settings);
      if (response.ok) {
        const json = await response.json();
        console.log(json);
        setInvoice(json);
        setError("");
      } else {
        const text = await response.text();
        throw new Error(text);
      }
    } catch (e: any) {
      console.error(e);
      setError(e.message as string);
      setInvoice("");
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Addressless</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <section className={styles.section}>
          <h2>Lightning Address</h2>
          <h3>{lightningAddress}</h3>
        </section>
        <section className={styles.section}>
          <h2>Lnurl</h2>
          {lnurl.length > 1 ? (
            <QRGenerator qrCode={lnurl} width={400} />
          ) : (
            <h3>PRETTY_URL env var not set</h3>
          )}
        </section>
        <section className={styles.section}>
          <h2>Create Invoice</h2>
          <form className={styles.form} onSubmit={generateInvoice}>
            <label>
              Sats
              <input
                type="number"
                min={1}
                max={21000000 * 100000000}
                value={sats}
                onChange={(e) => setSats(e.target.value)}
              />
            </label>
            <label>
              Description
              <input
                type="text"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </label>
            <input type="submit" value="Generate" />
          </form>
          <div className={styles.invoice}>
            <code>{invoice}</code>
            <div className={styles.error}>{error}</div>
            <div className={styles.qr}>
              {invoice.length > 1 && !error && (
                <QRGenerator qrCode={invoice} width={400} />
              )}
            </div>
          </div>
        </section>
      </main>
    </div>
  );
};

export default Home;
